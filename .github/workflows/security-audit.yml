name: 'Security Audit'

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  workflow_dispatch:     # Allow manual triggering

permissions:
  contents: read
  issues: write          # Explicitly grant permission to create issues

jobs:
  gosec:
    name: Run Gosec Security Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Run Gosec
        uses: securego/gosec@master
        with:
          args: '-fmt=json -out=gosec-results.json ./...'
        continue-on-error: true
        id: gosec

      - name: Process Gosec Results
        if: ${{ success() || failure() }}
        id: process
        run: |
          if [ -f gosec-results.json ]; then
            ISSUES=$(cat gosec-results.json | jq -r '.Issues | length')
            echo "issues=$ISSUES" >> $GITHUB_OUTPUT
            if [ "$ISSUES" -gt 0 ]; then
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
          fi

      - name: Create Issue
        if: ${{ steps.process.outputs.has_issues == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const resultsJson = JSON.parse(fs.readFileSync('gosec-results.json', 'utf8'));
            
            // Format issues for GitHub markdown
            let issueBody = `# Security Scan Results\n\n`;
            issueBody += `${resultsJson.Issues.length} potential security issue(s) found on ${new Date().toISOString().split('T')[0]}.\n\n`;
            
            resultsJson.Issues.forEach((issue, index) => {
              issueBody += `## Issue ${index+1}: ${issue.rule_id} (${issue.severity})\n`;
              issueBody += `**File:** ${issue.file}:${issue.line}\n\n`;
              issueBody += `**Description:** ${issue.details}\n\n`;
              issueBody += `**Code:** \`${issue.code}\`\n\n`;
              issueBody += `---\n\n`;
            });
            
            issueBody += `\nRun triggered by: ${context.payload.sender ? context.payload.sender.login : 'scheduled job'}\n`;
            issueBody += `[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security issues detected (${resultsJson.Issues.length}) - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'bug']
            });
